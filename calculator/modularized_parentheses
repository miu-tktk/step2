#! /usr/bin/python3
#read part
#内側の（）から処理していく
#)を見つけたらそれに一番近い（を探す
# line = input() ex. "1*(2+3)/(3+5)+1"
# def tokenize(line) -> return tokens
# def find_parentheses(tokens) -> return answer
    #def contains_parenthese(tokens) return True
    #def evaluate(tokens)


def read_number(line, index):
    number = 0
    while index < len(line) and line[index].isdigit():
        number = number * 10 + int(line[index])
        index += 1
    token = {'type': 'NUMBER', 'number': number}
    return token, index


def read_plus(line, index):
    token = {'type': 'PLUS'}
    return token, index + 1

def read_minus(line, index):
    token = {'type': 'MINUS'}
    return token, index + 1

def read_mutiply(line, index):
    token = {'type': 'MULTIPLY'}
    return token, index + 1

def read_divide(line, index):
    token = {'type': 'DIVIDE'}
    return token, index + 1

def read_left_parentheses(line, index):
    token = {'type': 'LP'}
    return token, index + 1

def read_right_parentheses(line, index):
    token = {'type': 'RP'}
    return token, index + 1

def tokenize(line):
    """
    Tokenize the input line and return a list of tokens
    """
    tokens = []
    index = 0
    while index < len(line):
        if line[index].isdigit():
            (token, index) = read_number(line, index)
        elif line[index] == '+':
            (token, index) = read_plus(line, index)
        elif line[index] == '-':
            (token, index) = read_minus(line, index)
        elif line[index] == '*':
            (token, index) = read_mutiply(line, index)
        elif line[index] == '/':
            (token, index) = read_divide(line, index)
        elif line[index] == '(':
            (token, index) = read_left_parentheses(line, index)
        elif line[index] == ')':
            (token, index) = read_right_parentheses(line, index)
        else:
            print('Invalid character found: ' + line[index])
            exit(1)
        tokens.append(token)
    return tokens

#def tokenaize -> pass!
# line = "(1+3*4/5)"
# tokens = tokenize(line)
# print(tokens)
#
def contains_parentheses(tokens):
    for token in tokens:
        if token in tokens:
            if token['type'] == 'LP':
                return True
    return False

def find_parentheses(tokens):
    index = 0
    
    #remove all round brackets ()
    #find first closed round brackets and calculate all in it
    while contains_parentheses(tokens):
        # print(tokens)
        # print(index)
        p_end = index #)
    #remember "(" & ")" index
        if tokens[index]['type'] == 'RP':
            p_start = index 
            in_parentheses = True 
            #find closest inner closed "("
            while in_parentheses:
                # print("p_start " + str(p_start))
                # print("p_end " + str(p_end))
                if tokens[p_start]['type'] == 'LP':
                    in_parentheses = False
                else:
                    p_start -= 1
            # print("p_start "+ str(p_start))
            # print("p_end "+ str(p_end))
            # break
            new_tokens = tokens[p_start + 1:p_end]
            # print(new_tokens)
            new_answer = evaluate(new_tokens) 
            # print(new_answer)
            tokens[p_start] = {'type':'NUMBER', 'number':new_answer}
            del tokens[(p_start + 1):(p_end + 1)]
            #print(tokens)
            index = p_start
        else:
            index += 1  #from start, find first ")"
    #calculate without ()      
    answer = evaluate(tokens)
    return answer


# line = "1+2+3"
# tokens = tokenize(line)
# convert(tokens)

def evaluate_multiply_divide(tokens):
    length = len(tokens)
    #multiply & divide
    index = 0
    while index < (length - 1) :
        # print(tokens)
        # print(index)
        if tokens[index]['type'] != 'NUMBER':
            if tokens[index]['type'] == 'MULTIPLY':
                tokens[index - 1]['number'] *= tokens[index + 1]['number']
                del tokens[index:index + 2]
                length = len(tokens)
            elif tokens[index]['type'] == 'DIVIDE':
                tokens[index - 1]['number'] /= tokens[index + 1]['number']
                del tokens[index:index + 2]
                length = len(tokens)
            else:
                index += 2
        else:
            index +=1
    # next_tokens = tokens
    return tokens

def evaluate_plus_minus(tokens):
    #add & subtract
    length = len(tokens)
    index = 0
    while index < (length - 1):
        if tokens[index]['type'] != 'NUMBER':
            if tokens[index]['type'] == 'PLUS':
                tokens[index - 1]['number'] += tokens[index + 1]['number']
                del tokens[index: index + 2]
                length = len(tokens)
            elif tokens[index]['type'] == 'MINUS':
                tokens[index - 1]['number'] -= tokens[index + 1]['number']
                del tokens[index: index + 2]
                length = len(tokens)
            else:
                index +=2
        else:
            index += 1
    # print(tokens)       
    answer = tokens[0]['number']
    return answer

def evaluate(tokens):
    """
    Evaluate the list of tokens and return a calculated result
    """
    tokens = evaluate_multiply_divide(tokens)
    return evaluate_plus_minus(tokens)
    


# while True:
#     print('> ', end="")
#     line = input()
#     tokens = tokenize(line)
#     convert(tokens)
#     answer = evaluate(tokens)
#     print("answer = %d\n" % answer)
# line = "1+2*3/2"
line = "1+(2+2*(1+3))"
# line = "(1+2)"
tokens = tokenize(line)

# new_tokens = evaluate_multiply_divide(tokens)
# answer = evaluate(tokens)
# print(answer)


answer = find_parentheses(tokens)
find_parentheses(tokens)
print(answer)

#def を一つずつ確認していく
#print()で挟んでいってどこの範囲内にerrorがあるのか絞り込む